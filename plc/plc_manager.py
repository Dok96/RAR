import threading
import time
import snap7
from plc_read.plcReadLen import read_len
from plc_read.plcReadTrig import read_trigger_def
from plc_read.resetTrig import res_trigger
from config import plc_ip, rack,slot

class PlcManager:
    def __init__(self):
        self.ip = plc_ip  # –ë–µ—Ä—ë–º IP –∏–∑ config
        self.rack = rack  # –ë–µ—Ä—ë–º rack –∏–∑ config
        self.slot = slot  # –ë–µ—Ä—ë–º slot –∏–∑ config
        self.plc = snap7.client.Client()
        self.connected = False
        self.running = False
        self.lock = threading.Lock()

        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.length = 0.0
        self.trigger = False

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ü–õ–ö."""
        try:
            self.plc.connect(self.ip, self.rack, self.slot)
            self.connected = True
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ü–õ–ö ({self.ip})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–õ–ö: {e}")

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –ü–õ–ö."""
        try:
            if self.connected:
                self.plc.disconnect()
                print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ü–õ–ö –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")

    def read_data(self):
        """–ß–∏—Ç–∞–µ—Ç –¥–ª–∏–Ω—É –ø—Ä–æ–≤–æ–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
        with self.lock:
            self.length = read_len(self.plc)
            self.trigger = read_trigger_def(self.plc)

    def reset_trigger(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä."""
        with self.lock:
            res_trigger(self.plc)

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ü–õ–ö."""
        self.running = True
        self.connect()

        try:
            while self.running:
                self.read_data()
                time.sleep(0.2)  # –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞ –ü–õ–ö (5 –ì—Ü)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —á—Ç–µ–Ω–∏—è –ü–õ–ö: {e}")
        finally:
            self.disconnect()

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ü–õ–ö."""
        self.running = False

    def get_length(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É –ø—Ä–æ–≤–æ–¥–∞."""
        with self.lock:
            return self.length

    def get_trigger(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
        with self.lock:
            return self.trigger