import threading
import time
import snap7
from plc_read.plcReadLen import read_len
from plc_read.plcReadTrig import read_trigger_def
from plc_read.resetTrig import res_trigger
from config import plc_ip, rack,slot, time_tag, MAX_retry_delay,retry_delay

class PlcManager:
    def __init__(self):
        self.ip = plc_ip  # –ë–µ—Ä—ë–º IP –∏–∑ config
        self.rack = rack  # –ë–µ—Ä—ë–º rack –∏–∑ config
        self.slot = slot  # –ë–µ—Ä—ë–º slot –∏–∑ config
        self.MAX_retry_delay=MAX_retry_delay
        self.retry_delay = retry_delay
        self.plc = snap7.client.Client()
        self.connected = False
        self.running = False
        self.lock = threading.Lock()

        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.length = 0.0
        self.trigger = False

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ü–õ–ö."""
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ü–õ–ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥."""
        while self.running:  # –ü–æ–∫–∞ –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω
            try:
                self.plc = snap7.client.Client()  # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Client
                self.plc.connect(self.ip, self.rack, self.slot)
                self.connected = True
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ü–õ–ö ({self.ip})")
                self.retry_delay = retry_delay  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ü–õ–ö: {e}. \n –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self.retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep( self.retry_delay)  # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                self.retry_delay= min(self.retry_delay+10,self.MAX_retry_delay)


    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –ü–õ–ö."""
        try:
            if self.connected:
                self.plc.disconnect()
                print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ü–õ–ö –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}")

    def read_data(self):
        """–ß–∏—Ç–∞–µ—Ç –¥–ª–∏–Ω—É –ø—Ä–æ–≤–æ–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
        try:
            #–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not self.plc.get_connected():
                print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–ª–∫ –ø–æ—Ç–µ—Ä—è–Ω–æ ")
                self.connected=False
                return

            with self.lock:
                self.length = read_len(self.plc)
                self.trigger = read_trigger_def(self.plc)

        except Exception as e:
            print(f"Error : {e}")
            self.connected = False  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ

    def reset_trigger(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä."""
        with self.lock:
            res_trigger(self.plc)

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ü–õ–ö."""
        self.running = True
        self.connect()

        try:
            while self.running:
                if not self.connected:
                    print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ü–õ–ö –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                    self.connect()  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ
                else:
                    self.read_data()
                    time.sleep(time_tag)  # –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞ –ü–õ–ö (5 –ì—Ü)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —á—Ç–µ–Ω–∏—è –ü–õ–ö: {e}")
        finally:
            self.disconnect()

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ü–õ–ö."""
        self.running = False

    def get_length(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É –ø—Ä–æ–≤–æ–¥–∞."""
        with self.lock:
            return self.length

    def get_trigger(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
        with self.lock:
            return self.trigger